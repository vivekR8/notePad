{"version":3,"sources":["component/section-heads/section-head.component.jsx","component/sectiontop/sectionTop.component.jsx","component/section/section.component.jsx","component/section-notes/sectionNotes.component.jsx","component/notepad.component.jsx","App.js","serviceWorker.js","index.js"],"names":["sectionHead","notesHead","data","onClickFuntion","onClick","e","className","Button","variant","SectionTop","searchfield","onChange","target","value","fontSize","section","showList","storage","Object","keys","sessionStorage","length","map","item","getItem","sectionNotes","props","handleChange","console","log","state","heading","setState","content","name","onClickChange","setItem","alert","refreshList","type","placeholder","this","rows","color","text","newNote","toggleNewNote","React","Component","Notepad","inputText","filteredlist","filter","includes","list","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc076db7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './section-head.styles.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst sectionHead = ({notesHead,data,onClickFuntion})=>(\r\n    <div \r\n    onClick={(e)=>onClickFuntion(e,data,notesHead)} \r\n    className='section-head'>\r\n        <Button  variant=\"contained\" className='title'>{notesHead}</Button>\r\n        \r\n\r\n    </div>\r\n);\r\n\r\nexport default sectionHead;","import React from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport './sectionTop.styles.scss';\r\n\r\n\r\n\r\nconst SectionTop = ({searchfield,onClickFuntion}) =>{\r\n    return(\r\n    <div className='sectionTop'>\r\n        <input onChange={e=>searchfield(e.target.value)} className='input'/>\r\n        <AddIcon onClick={e=>onClickFuntion(e,'','',true)}  fontSize=\"large\" className='icon'>star</AddIcon>\r\n        \r\n    </div>\r\n    );\r\n    };\r\n\r\nexport default SectionTop;","import React from 'react';\r\n\r\nimport SectionHead from '../section-heads/section-head.component';\r\nimport SectionTop from '../sectiontop/sectionTop.component.jsx';\r\n\r\n\r\n\r\nconst section =({showList,searchfield,onClickFuntion})=>{\r\n    let storage =Object.keys(sessionStorage)\r\n           return( \r\n           <div className=\"section\">\r\n                <SectionTop searchfield={searchfield} onClickFuntion={onClickFuntion}/>\r\n                {(showList.length>0)?\r\n                (showList.map(item=><SectionHead onClickFuntion={onClickFuntion} notesHead={item} data={sessionStorage.getItem(item)}/>))\r\n                :(storage.map(item=><SectionHead onClickFuntion={onClickFuntion} notesHead={item} data={sessionStorage.getItem(item)}/>))\r\n            \r\n                   \r\n                }\r\n                </div>\r\n                );\r\n            }\r\n\r\nexport default section;","import React from 'react';\r\nimport './sectionNotes.styles.scss';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass sectionNotes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heading: '',\r\n            content: '',\r\n\r\n        }\r\n    }\r\n    //to show changed/ new props value\r\n    static getDerivedStateFromProps(props, state) {\r\n        \r\n            if(props.newNote) { \r\n                console.log(props.newNote)\r\n                props.toggleNewNote()\r\n                return {\r\n                heading: '',\r\n                content: ''\r\n            }\r\n        }\r\n            else if (props.notesHead && (props.notesHead !== state.heading)){\r\n                return {\r\n                    heading: '',\r\n                    content: ''\r\n                }\r\n            }\r\n            console.log('gdfp', state.heading)\r\n        \r\n        return null;\r\n    }\r\n\r\n    //Showing Updated and new Created content\r\n    handleChange = (e) => {\r\n        console.log('props noteshead', this.props.notesHead, this.state.heading);\r\n        if (this.props.notesHead) {\r\n            this.setState({ heading: this.props.notesHead, content: this.props.data })\r\n        }\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value })\r\n        console.log('handlechange', this.state.heading, this.state.content);\r\n\r\n    }\r\n    //Storing and Updating in Session Storage\r\n    onClickChange = () => {\r\n        const { heading, content } = this.state;\r\n        if (sessionStorage.getItem(`${this.props.notesHead}`)) {\r\n            sessionStorage.setItem(`${this.props.notesHead}`, content);\r\n        } else {\r\n            if (heading === '' || content === '') {\r\n                alert('please fill heading and content')\r\n            } else {\r\n                sessionStorage.setItem(`${heading}`, content);\r\n                this.props.refreshList(heading)\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='notes'>\r\n\r\n                <input\r\n                    className='heading'\r\n                    type='text'\r\n                    name='heading'\r\n                    placeholder='Enter Heading'\r\n                    value={(this.state.heading) ? (this.state.heading) : (this.props.notesHead)\r\n\r\n\r\n\r\n                    }\r\n                    onChange={this.handleChange}\r\n                />\r\n                <textarea\r\n                    className='content'\r\n                    rows=\"50\"\r\n                    name='content'\r\n                    placeholder='Enter content'\r\n                    value={\r\n                        (this.state.content) ? (this.state.content) : (this.props.data)\r\n                    }\r\n                    onChange={this.handleChange}\r\n                />\r\n                <Button variant=\"outlined\" color=\"primary\"\r\n                    onClick={this.onClickChange}>\r\n                    {\r\n                        this.props.text\r\n                    }\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nexport default sectionNotes;","import React from 'react';\r\nimport Section from './section/section.component';\r\nimport SectionNotes from './section-notes/sectionNotes.component';\r\nimport './notepad.styles.css';\r\n\r\nclass Notepad extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            notesHead:'',\r\n            data:'',\r\n            text:'CREATE NEW NOTE',\r\n            list:'',\r\n            newNote:false,\r\n        }\r\n    }\r\n    \r\n    toggleNewNote=()=>{\r\n        this.setState({newNote:false})\r\n    }\r\n   \r\n    refreshList = ()=>{\r\n        this.setState({newNote:false})\r\n    }\r\n    //to set incomint data to states\r\n    onClickChange=(e,data,notesHead,newNote=false)=>{\r\n        // console.log('onclickchnage',e.target);\r\n        this.setState({newNote})\r\n        if (data)\r\n        {this.setState({text:\"UPDATE\"})}\r\n        else{this.setState({text:\"CREATE NEW NOTE\"})}\r\n        this.setState({data:data,notesHead:notesHead},()=>{console.log('show',this.state.data,this.state.notesHead)})\r\n        //console.log('notepad',data);\r\n    }\r\n    searchfield = (inputText)=>{\r\n        //console.log(inputText)\r\n        let copyList=Object.keys(sessionStorage).map(item=>((item)))\r\n        \r\n        let filteredlist = copyList.filter(item=> item.includes(inputText))\r\n        this.setState({list:filteredlist})\r\n        \r\n\r\n    }\r\n    render(){\r\n        const {notesHead,data,text,list} = this.state;\r\n       \r\n        return(\r\n            <div className='container'>\r\n                <Section showList={list} searchfield={this.searchfield} onClickFuntion={this.onClickChange}/>\r\n                <SectionNotes \r\n                 refreshList={this.refreshList}\r\n                 text={text}\r\n                 data={data} \r\n                 newNote={this.state.newNote}\r\n                 toggleNewNote={this.toggleNewNote}\r\n                 notesHead={notesHead}/>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n};\r\nexport default Notepad;","import React from 'react';\n\nimport Notepad from './component/notepad.component';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div  >\n      <Notepad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}